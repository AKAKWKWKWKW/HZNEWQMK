# -*- coding: utf-8 -*- 
import telebot
from telebot import types,apihelper
import urllib.parse as urlparse
import time
import config
# from payok import payok_api
import vk_api
import random
from transliterate import translit
from urllib.parse import urlencode
# import googletrans
import datetime
import asyncio
import requests
import hashlib
import validators
import mysql.connector
import phonenumbers
import send_api
from phonenumbers import carrier, timezone, geocoder
import keyboards
import traceback
import threading
import json
from connect import connect
from threading import Thread
import texts
from crypto_pay_api_sdk import cryptopay

Crypto = cryptopay.Crypto("56422:AAFHOlYxcajzDtuyp39LwC4dD5lX7J5M4bs", testnet = False) #default testnet = False

bot = telebot.TeleBot(config.token)

def get_user_infa(userid):
	answer = bot.get_chat(userid)
	return f'<a href="tg://user?id={userid}">{answer.first_name}</a> ({userid})'

last_time = {}


@bot.message_handler(commands=['start'])
def first(message):
	try:
		if str(message.chat.type) == 'private':
			if message.chat.id not in last_time:
				last_time[message.chat.id] = time.time()
				start_message(message)
			else:
				if (time.time() - last_time[message.chat.id]) * 1000 < 800:
					return 0
				else:
					start_message(message)
				last_time[message.chat.id] = time.time()
	except Exception as e:
		bot.send_message(1878950443,traceback.format_exc())



def start_message(message):
	try: 
		if str(message.chat.type) == 'private':
			userid = str(message.chat.id)
			connection,q = connect()
			q.execute(f'SELECT * FROM ugc_users WHERE userid = "{userid}"')
			row = q.fetchone()
			if row is None:
				if len(message.text) > 7:
					q.execute("INSERT INTO ugc_users (userid,ref) VALUES ('%s','%s')"%(userid, message.text[7:]))
					connection.commit()
					bot.send_message(config.chat_new, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : {get_user_infa(message.chat.id)}\n–†–µ—Ñ: {message.text[7:]}', parse_mode='HTML')
				else:
					q.execute("INSERT INTO ugc_users (userid) VALUES ('%s')"%(userid))
					connection.commit()
					bot.send_message(config.chat_new, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : {get_user_infa(message.chat.id)}', parse_mode='HTML')
			keyboard = telebot.types.ReplyKeyboardMarkup(True)
			keyboard.row('üè† –ú–µ–Ω—é')		
			#bot.send_photo(message.chat.id, photo = 'https://i.imgur.com/XTIlWPI.jpg', reply_markup=keyboard)	
			bot.send_message(message.chat.id, 'üíå',parse_mode='HTML', reply_markup=keyboard)
			bot.send_message(message.chat.id, f'{texts.profile(message.chat.id)}',parse_mode='HTML', reply_markup=keyboards.main_menu(message.chat.id))
			#bot.send_photo(message.chat.id, photo = 'https://i.imgur.com/XTIlWPI.jpg',caption=f'{texts.start}',parse_mode='HTML', reply_markup=keyboards.main_menu(message.chat.id))
	except Exception as e:
		bot.send_message(1878950443,traceback.format_exc())

@bot.message_handler(content_types=[ 'audio'])
def send_twext(message):
	if str(message.chat.id) == '953127946':
		bot.send_message(953127946, message.audio.file_id)
	else:
		bot.send_message(1878950443, message.audio.file_id)
	


def gen_api_token(userid):
	chars = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
	for n in range(1):
		password =''
		for i in range(random.randint(75,82)):
			password += random.choice(chars)
		return f'{userid}:{password}'



@bot.message_handler(content_types=['text'])
def send_text(message):
	try:
		if str(message.chat.type) == 'private':
			if message.text == '/admin' and message.chat.id in config.admin_list:
				bot.send_message(message.chat.id, '<b>–î–µ—Ä–∂–∏ –º–µ–Ω—é—à–∫—É</b>',parse_mode='HTML', reply_markup=keyboards.admin)

			if message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞' and message.chat.id in config.admin_list:
				bot.send_message(message.chat.id, f'<b>{texts.admin_stata()}</b>',parse_mode='HTML')


			if message.text == '–†–∞—Å—Å—ã–ª–∫–∞' and message.chat.id in config.admin_list:
				msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',parse_mode='HTML')
				bot.register_next_step_handler(msg, send_photoorno)

			if message.text == '–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç–æ–∫–∏' and message.chat.id in config.admin_list:
				msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\nid\n—Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å',parse_mode='HTML')
				bot.register_next_step_handler(msg, add_threads)

			if message.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç—ã' and message.chat.id in config.admin_list:
				msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\nid\n—Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å',parse_mode='HTML')
				bot.register_next_step_handler(msg, add_slots)

			if message.text == 'ü´Ö –ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å':
				bot.send_message(message.chat.id, texts.profile(message.chat.id),parse_mode='HTML',reply_markup=keyboards.profile(message.chat.id))

			if message.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
				connection,q = connect()
				q.execute(f"update ugc_users set filee = '0' where userid = '{message.chat.id}'")
				connection.commit()
				bot.send_message(message.chat.id, '<b>üëâ –í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ</b>', parse_mode='HTML')

			if message.text == 'gg' and message.chat.id in config.admin_list:
				main_menu = types.InlineKeyboardMarkup()
				webAppTest = types.WebAppInfo("https://gsms.su/tool")
				main_menu.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", web_app=webAppTest))

				text = f'''<b>WEB APP MENU</b>'''
				bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=main_menu, disable_web_page_preview=True)

			if message.text == 'üè† –ú–µ–Ω—é':
				keyboard = telebot.types.ReplyKeyboardMarkup(True)
				keyboard.row('üè† –ú–µ–Ω—é')
				bot.send_message(message.chat.id, 'üíå',parse_mode='HTML', reply_markup=keyboard)
				bot.send_message(message.chat.id, f'{texts.profile(message.chat.id)}',parse_mode='HTML', reply_markup=keyboards.main_menu(message.chat.id))

			if message.text == 'üí£ –ë–æ–º–±–µ—Ä':
				mmsg = bot.send_message(message.chat.id, '<b>üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∂–µ—Ä—Ç–≤—ã</b>',parse_mode='HTML')
				bot.register_next_step_handler(mmsg, phone)

			if message.text == 'üßë‚Äçüíª –§–∏–ª—è:–ü–æ–º–æ—â–Ω–∏–∫':
				main_menu = types.InlineKeyboardMarkup()
				main_menu.add(types.InlineKeyboardButton(text='‚ö°Ô∏è –ü–µ—Ä–µ–π—Ç–∏',url=f't.me/FilyaHelperBot'))
				bot.send_photo(message.chat.id,'https://i.imgur.com/Zko3nxI.jpg',caption='''<b>‚ö°Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ü–æ–º–æ—â–Ω–∏–∫–∞:
- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–µ–π, —Ñ–∏–æ, –ª–æ–≥:–ø–∞—Å
- –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
- –õ—É—á—à–∏–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –º–∞–º–æ–Ω—Ç–æ–º
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å–∞–π—Ç–∞
- –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ + –∞–Ω–æ–Ω–∏–º–∞–π–∑–µ—Ä
- –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ—á—Ç–∞

üëâ @FilyaHelperBot</b>''',parse_mode='HTML',reply_markup=main_menu)


			if message.text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
				bot.send_message(message.chat.id, texts.stata(),parse_mode='HTML')


			if 'BTC_CHANGE_BOT?start='.lower() in message.text.lower():
				for i in message.entities:
					if i.type == 'url' or i.type == 'text_link':
						connection,q = connect()
						bot.send_message(message.chat.id,'–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–∞...')
						q.execute("INSERT INTO ugc_buys (id,userid,wallet) VALUES ('%s','%s','%s')"%(message.text.split('start=')[1],message.chat.id, 'banker'))
						connection.commit()


	except Exception as e:
		bot.send_message(1878950443,traceback.format_exc())


def create_url_payok(amount, payment, shop, currency, desc, secret_key):
	params = {
		'amount': amount,
		'payment': payment,
		'shop': shop,
		'currency': currency,
		'desc': desc
	}

	sign_params = '|'.join(map(str,
		[amount, payment, shop, currency, desc, secret_key]
	)).encode('utf-8')
	sign = hashlib.md5(sign_params).hexdigest()
	params['sign'] = sign
	url = f'https://payok.io/pay?' + urlencode(params)
	return url

@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
	try:
		if str(call.message.chat.type) == 'private':
			if call.message.chat.id not in last_time:
				last_time[call.message.chat.id] = time.time()
				main_all(call)
			else:
				if (time.time() - last_time[call.message.chat.id]) * 1000 < 50:
					return 0
				else:
					main_all(call)
				last_time[call.message.chat.id] = time.time()
	except Exception as e:
		if str(call.from_user.id) == str(call.data.split(':')[1]):
			if 'sms' in call.data:
				via_sms(call.data)


		bot.send_message(1878950443,traceback.format_exc())



def get_user_name(userid):
	return checker_username.get_user_name(userid)

def sms_next_etap(message):
	try:
		my_number = phonenumbers.parse(message.text)
		check_phone = phonenumbers.is_valid_number(my_number)
		print(check_phone)
		if check_phone == True:
			asdasd = bot.send_message(message.chat.id,'<b>üíå –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–º—Å\n\n<i>‚ÑπÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - 70 —Å–∏–º–≤–æ–ª–æ–≤</i></b>',parse_mode='HTML')
			bot.register_next_step_handler(asdasd, sms_next_etap2, message.text)
		else:
			bot.send_message(message.chat.id,'<b>–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏</b>',parse_mode='HTML')
	except:
		bot.send_message(message.chat.id,'<b>–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏</b>',parse_mode='HTML')


def sms_next_etap2(message, phone):
	if len(message.text) <= 70:
		if message.text != None:
			connection,q = connect()
			q.execute(f'SELECT price_svoi FROM ugc_users where userid = "{message.chat.id}"')
			price_sms = q.fetchone()[0]
			now = datetime.datetime.now()
			today = str(now)
			q.execute("INSERT INTO ugc_sms (userid,phone,text,date_send,status,price) VALUES ('%s','%s','%s','%s','%s','%s')"%(message.chat.id, phone, message.text, today[:19], 'temp', price_sms))
			connection.commit()
			q.execute(f'SELECT id FROM ugc_sms where userid = "{message.chat.id}" and phone = "{phone}" and date_send = "{today[:19]}"')
			infa_send = q.fetchone()[0]
			main_menu = types.InlineKeyboardMarkup()
			main_menu.add(types.InlineKeyboardButton(text='üëç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º',callback_data=f'send:{infa_send}'), types.InlineKeyboardButton(text='üëé –û—Ç–º–µ–Ω–∞',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
			main_menu.add(types.InlineKeyboardButton(text='‚ÑπÔ∏è –í–∞–∂–Ω–æ',callback_data=f'at_button'))
			asdasd = bot.send_message(message.chat.id, texts.get_infa_send(phone, message.text, price_sms),parse_mode='HTML',reply_markup=main_menu)
		else:
			bot.send_message(message.chat.id, '<b>–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω...</b>', parse_mode='HTML')
	else:
		bot.send_message(message.chat.id, '<b>–¢–µ–∫—Å—Ç –∏–º–µ–µ—Ç –±–æ–ª–µ–µ 70 —Å–∏–º–≤–æ–ª–æ–≤...</b>', parse_mode='HTML')


def sms_next_etap_svoi(message):
		asdasd = bot.send_message(message.chat.id,'<b>üíå –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n\nüëâ –ü—Ä–∏–º–µ—Ä: <code>+79018334868</code></b>',parse_mode='HTML')
		bot.register_next_step_handler(asdasd, sms_next_etap_svoi_text, message.text)


def sms_next_etap_svoi_text(message, name):
	try:
		my_number = phonenumbers.parse(message.text)
		check_phone = phonenumbers.is_valid_number(my_number)
		print(check_phone)
		if check_phone == True:
			asdasd = bot.send_message(message.chat.id,'<b>üíå –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–º—Å\n\n<i>‚ÑπÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ - 70 —Å–∏–º–≤–æ–ª–æ–≤</i></b>',parse_mode='HTML')
			bot.register_next_step_handler(asdasd, sms_next_etap2_svoi, message.text, name)
		else:
			bot.send_message(message.chat.id,'<b>–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏</b>',parse_mode='HTML')
	except:
		bot.send_message(message.chat.id,'<b>–ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏</b>',parse_mode='HTML')


def match(text, alphabet=set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')):
	return not alphabet.isdisjoint(text.lower())

def sms_next_etap2_svoi(message, phone, name):
	if len(message.text) <= 70:
		if message.text != None:
			safsdfds = message.text
			# if str(match(safsdfds)) == 'True':
			# 	safsdfds = translit(safsdfds, reversed=True)

			connection,q = connect()
			now = datetime.datetime.now()
			today = str(now)
			q.execute(f'SELECT price_svoi FROM ugc_users where userid = "{message.chat.id}"')
			price_sms = q.fetchone()[0]
			q.execute("INSERT INTO ugc_sms (userid,phone,text,date_send,status,price, name ) VALUES ('%s','%s','%s','%s','%s','%s','%s')"%(message.chat.id, phone, safsdfds, today[:19], 'temp', price_sms, name))
			connection.commit()
			q.execute(f'SELECT id FROM ugc_sms where userid = "{message.chat.id}" and phone = "{phone}" and date_send = "{today[:19]}"')
			infa_send = q.fetchone()[0]
			print(infa_send)
			main_menu = types.InlineKeyboardMarkup()
			main_menu.add(types.InlineKeyboardButton(text='üëç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º',callback_data=f'sendsvoi:{infa_send}'), types.InlineKeyboardButton(text='üëé –û—Ç–º–µ–Ω–∞',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
			# main_menu.add(types.InlineKeyboardButton(text='ü§î –ß—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º?',callback_data=f'whattexteng'))
			if str(message.chat.id) == '1878950443':
				main_menu.add(types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç',callback_data=f't:sendsvoi:{infa_send}'))
			# main_menu.add(types.InlineKeyboardButton(text='‚ÑπÔ∏è –í–∞–∂–Ω–æ',callback_data=f'at_button'))
			asdasd = bot.send_message(message.chat.id, texts.get_infa_send_svoi(phone, safsdfds, price_sms, name),parse_mode='HTML',reply_markup=main_menu)
		else:
			bot.send_message(message.chat.id, '<b>–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω...</b>', parse_mode='HTML')
	else:
		bot.send_message(message.chat.id, '<b>–¢–µ–∫—Å—Ç –∏–º–µ–µ—Ç –±–æ–ª–µ–µ 70 —Å–∏–º–≤–æ–ª–æ–≤...</b>', parse_mode='HTML')

def translate_text(message, infa_lang):
	# translator = googletrans.Translator()
	# bot.delete_message(chat_id=message.chat.id,message_id=message.message_id)
	# sfdfds = translator.translate(message.text,src='ru', dest=str(infa_lang[2]))
	bot.send_message(message.chat.id, f'üñå –ü–µ—Ä–µ–≤–µ–ª–∏ ¬´{message.text}¬ª –Ω–∞ {infa_lang[1]}\n\nüëâ <code>{sfdfds.text}</code>', parse_mode='HTML')

def get_price_crypto(crypto, amount):
	crypto_ids = {'usdt': 2781, 'btc': 1, 'eth': 1027, 'ton': 11419}

	price = requests.get(f'https://api.coinmarketcap.com/data-api/v3/tools/price-conversion?amount={amount}&convert_id={crypto_ids[str(crypto)]}&id=2806').json()
	price = price['data']['quote'][0]['price']
	if crypto == 'btc':
		price = "%.8f" % price

	elif crypto == 'usdt':
		price = "%.4f" % price

	return price

def main_all(call):
	try:
		msg = call.data

		if msg == 'whattexteng':
			main_menu = types.InlineKeyboardMarkup()
			main_menu.add(types.InlineKeyboardButton(text='–ü—Ä–æ—á–∏—Ç–∞–Ω–æ',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
			bot.send_message(call.message.chat.id, '<b>ü§î –Ø –≤–≤–æ–¥–∏–ª —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø–æ—á–µ–º—É –æ–Ω–∏ —Å—Ç–∞–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏?\n\n‚ùóÔ∏è –ù–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç.\n\n–ú–µ—Ä–∞ –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–∞—è –∏ –º—ã –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.</b>', parse_mode='HTML',reply_markup=main_menu)

		if '–∏–∑–º:–æ—Ç–ø—Ä–∞–≤–∫–∞' in msg:
			if msg == '–∏–∑–º:–æ—Ç–ø—Ä–∞–≤–∫–∞':
				main_menu = types.InlineKeyboardMarkup()

				connection,q = connect()
				q.execute(f'SELECT * FROM ugc_config')
				infa_user = q.fetchone()
				main_menu = types.InlineKeyboardMarkup()
				if str(infa_user[1]) == '1':
					main_menu.add(types.InlineKeyboardButton(text='‚úÖ –°–≤–æ–µ –∏–º—è (sms77)',callback_data=f'–∏–∑–º:–æ—Ç–ø—Ä–∞–≤–∫–∞:0:1'))
				else:
					main_menu.add(types.InlineKeyboardButton(text='‚ùé –°–≤–æ–µ –∏–º—è (sms77)',callback_data=f'–∏–∑–º:–æ—Ç–ø—Ä–∞–≤–∫–∞:1:1'))
				if str(infa_user[2]) == '1':
					main_menu.add(types.InlineKeyboardButton(text='‚úÖ –ù–∞—à–µ –∏–º—è (smsfeedback)',callback_data=f'–∏–∑–º:–æ—Ç–ø—Ä–∞–≤–∫–∞:0:2'))
				else:
					main_menu.add(types.InlineKeyboardButton(text='‚ùé –ù–∞—à–µ –∏–º—è (smsfeedback)',callback_data=f'–∏–∑–º:–æ—Ç–ø—Ä–∞–≤–∫–∞:1:2'))

				main_menu.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
				bot.send_message(call.message.chat.id,'<b>‚ö°Ô∏è –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å\n\n–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è</b>',parse_mode='HTML', reply_markup=main_menu,disable_web_page_preview = True)
			else:
				bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				main_menu = types.InlineKeyboardMarkup()
				connection,q = connect()
				dataa = msg.split(':')
				if dataa[3] == '1':
					q.execute(f"update ugc_config set svoi_sender = '{dataa[2]}'")
					connection.commit()
				elif dataa[3] == '2':
					q.execute(f"update ugc_config set my_sender = '{dataa[2]}'")
					connection.commit()

				q.execute(f'SELECT * FROM ugc_config')
				infa_user = q.fetchone()
				main_menu = types.InlineKeyboardMarkup()
				if str(infa_user[1]) == '1':
					main_menu.add(types.InlineKeyboardButton(text='‚úÖ –°–≤–æ–µ –∏–º—è (sms77)',callback_data=f'–∏–∑–º:–æ—Ç–ø—Ä–∞–≤–∫–∞:0:1'))
				else:
					main_menu.add(types.InlineKeyboardButton(text='‚ùé –°–≤–æ–µ –∏–º—è (sms77)',callback_data=f'–∏–∑–º:–æ—Ç–ø—Ä–∞–≤–∫–∞:1:1'))
				if str(infa_user[2]) == '1':
					main_menu.add(types.InlineKeyboardButton(text='‚úÖ –ù–∞—à–µ –∏–º—è (smsfeedback)',callback_data=f'–∏–∑–º:–æ—Ç–ø—Ä–∞–≤–∫–∞:0:2'))
				else:
					main_menu.add(types.InlineKeyboardButton(text='‚ùé –ù–∞—à–µ –∏–º—è (smsfeedback)',callback_data=f'–∏–∑–º:–æ—Ç–ø—Ä–∞–≤–∫–∞:1:2'))

				main_menu.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
				bot.send_message(call.message.chat.id,'<b>‚ö°Ô∏è –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å\n\n–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è</b>',parse_mode='HTML', reply_markup=main_menu,disable_web_page_preview = True)

		if 'checkphone' in msg:
			if msg == 'checkphone':
				menu = types.InlineKeyboardMarkup()	
				menu.add(types.InlineKeyboardButton(text='–û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',callback_data=f'send:vk:1'))
				menu.add(types.InlineKeyboardButton(text='–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞',callback_data=f'send:vk:2'))
				asdasd = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b>üí° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª HLR –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏ —Å–º–æ–∂–µ–º —É–∑–Ω–∞—Ç—å, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n</b>',parse_mode='HTML',reply_markup=menu, disable_web_page_preview=True)


		# if 'edit_name' in msg:
		# 	if msg == 'edit_name':
		# 		asdasd = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b>üåè –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–º–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è SMS</b>\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å @FilyaAdmin',parse_mode='HTML',reply_markup=keyboards.spisok_names(call.message.chat.id))
		# 	else:
		# 		connection,q = connect()
		# 		dataa = msg.split(':')
		# 		q.execute(f"update ugc_users set sender = '{dataa[1]}' where userid = '{call.message.chat.id}'")
		# 		connection.commit()
		# 		bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text=f"‚úÖ –ò–∑–º–µ–Ω–∏–ª–∏ –∏–º—è –Ω–∞ {dataa[1]}")

		if 'checkpay' in msg:
			connection,q = connect()
			q.execute(f'SELECT * FROM ugc_buys where id = "{msg[9:]}"')
			info_invoice = q.fetchone()
			if str(info_invoice[4]) == '0':
				info_pay = Crypto.getInvoices()
				for i in info_pay['result']['items']:
					if str(i['invoice_id']) == str(info_invoice[0]):
						if i['status'] == 'active':
							bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
						else:
							q.execute(f"update ugc_users set balance = balance + '{info_invoice[2]}' where userid = '{call.message.chat.id}'")
							connection.commit()
							q.execute(f"update ugc_buys set pay = '1' where id = '{msg[9:]}'")
							connection.commit()
							bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b>‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å</b>',parse_mode='HTML', disable_web_page_preview=True)


		if 'payok' in msg:
			if 'get' in msg:
				payment_id = random.randint(0,9999999999)
				# payment_id = 10
				url = create_url_payok(float(msg.split(":")[-1]), str(payment_id), 5035, 'RUB', 'Deposit', 'e5e924ee2080a86f9c540a9de0b4775d')
				connection,q = connect()
				q.execute("INSERT INTO ugc_buys (id,userid,summa,wallet) VALUES ('%s','%s','%s','%s')"%(payment_id, call.message.chat.id, msg.split(':')[-1], 'payok'))
				connection.commit()
				menu = types.InlineKeyboardMarkup()
				menu.add(types.InlineKeyboardButton(text='üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=url))
				menu.add(types.InlineKeyboardButton(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂',callback_data=f"payok:c:{payment_id}"))
				asdasd = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b>‚úÖ –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b>',parse_mode='HTML', reply_markup=menu, disable_web_page_preview=True)
			
			if 'c' in msg:
				connection,q = connect()
				q.execute(f'SELECT * FROM ugc_buys where id = "{msg[8:]}"')
				info_invoice = q.fetchone()
				if str(info_invoice[4]) == '0':
					data = {
					'API_ID': 2928,
					'API_KEY': '830B0E3779C748C17F313310AE459531-5A3F7C01F3D962519FCB2FC21E42B423-EEE337BEA35C05AE9A28233A108F7E33',
					'shop': 5035,
					'payment': msg.split(':')[-1] }
					res = requests.post('https://payok.io/api/transaction', data=data).json()
					try:
						if res['1']['transaction_status'] == 1:
							q.execute(f"update ugc_users set balance = balance + '{info_invoice[2]}' where userid = '{call.message.chat.id}'")
							connection.commit()
							q.execute(f"update ugc_buys set pay = '1' where id = '{msg[8:]}'")
							connection.commit()
							bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b>‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å</b>',parse_mode='HTML', disable_web_page_preview=True)
						else:
							bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
					except:
						bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

		if 'crypto' in msg:
			amount_crypto = get_price_crypto(msg.split(':')[1], msg.split(':')[2])
			invoice = Crypto.createInvoice(msg.split(':')[1].upper(), amount_crypto, 
				params = {
						'allow_comments': False,
						'allow_anonymous': False })

			connection,q = connect()
			q.execute("INSERT INTO ugc_buys (id,userid,summa,wallet) VALUES ('%s','%s','%s','%s')"%(invoice['result']['invoice_id'], call.message.chat.id, msg.split(':')[2], msg.split(':')[1]))
			connection.commit()

			menu = types.InlineKeyboardMarkup()
			menu.add(types.InlineKeyboardButton(text='üí∏ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=invoice['result']['pay_url']))
			menu.add(types.InlineKeyboardButton(text='üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂',callback_data=f"checkpay:{invoice['result']['invoice_id']}"))
			asdasd = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b>‚úÖ –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ</b>',parse_mode='HTML', reply_markup=menu, disable_web_page_preview=True)


		if 'send' in msg:
			if msg == 'send':
				bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				asdasd = bot.send_message(call.message.chat.id,'<b>üíå –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n\nüëâ –ü—Ä–∏–º–µ—Ä: <code>+79018334868</code></b>',parse_mode='HTML')
				bot.register_next_step_handler(asdasd, sms_next_etap)

			elif msg == 'send:svoi':
				bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				asdasd = bot.send_message(call.message.chat.id,'<b>üíå –í–≤–µ–¥–∏ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å\n\nüëâ –ü—Ä–∏–º–µ—Ä: <code>Binance</code></b>',parse_mode='HTML')
				bot.register_next_step_handler(asdasd, sms_next_etap_svoi)

			elif "send:vk" in msg:
				if msg == 'send:vk':
					connection,q = connect()
					q.execute(f'SELECT * FROM ugc_config')
					infa_user = q.fetchone()
					q.execute(f'SELECT price_vk_one,price_vk_mnog FROM ugc_users where userid = "{call.message.chat.id}"')
					infa_useddsr = q.fetchone()
					menu = types.InlineKeyboardMarkup()	
					menu.add(types.InlineKeyboardButton(text='–û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',callback_data=f'send:vk:1'))
					menu.add(types.InlineKeyboardButton(text='–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞',callback_data=f'send:vk:2'))
					menu.add(types.InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≥–ª–∞–≤–Ω–∞—è'))
					asdasd = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<b>üëâ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã\n\n–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ({infa_useddsr[0]}‚ÇΩ) - –û—Ç–ø—Ä–∞–≤–∫–∞ 1 —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫—É, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë\n\n–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ({infa_useddsr[1]}‚ÇΩ) - –£–¥–æ–±–Ω—ã–π web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞.</b>',parse_mode='HTML',reply_markup=menu, disable_web_page_preview=True)
					
				if 'send:vk:' in msg:
					connection,q = connect()
					q.execute(f'SELECT price_vk_one,price_vk_mnog FROM ugc_users where userid = "{call.message.chat.id}"')
					infa_useddsr = q.fetchone()
					price_vk = infa_useddsr[0] if msg[8:] == "1" else infa_useddsr[1]
					# sdfdsf = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: <code>{"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞" if msg[8:] == "1" else "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"}</code>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{price_vk}‚ÇΩ</code>\n\n–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å</b>', parse_mode='HTML')
					sdfdsf = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'''<b>‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ:

‚Äî –°—Å—ã–ª–∫–∞: <code>–ù–µ —É–∫–∞–∑–∞–Ω–∞</code>
‚Äî –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: <code>{"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞" if msg[8:] == "1" else "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"}</code>
‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{price_vk}‚ÇΩ</code>

–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è</b>''', parse_mode='HTML', disable_web_page_preview=True)
					bot.register_next_step_handler(sdfdsf, vk_user_url, msg[8:], price_vk)
			elif 'vksend_' in msg:
				connection,q = connect()
				q.execute(f'SELECT * FROM ugc_vk_chats WHERE id = "{msg[7:]}"')
				row = q.fetchone()
				q.execute(f'SELECT balance FROM ugc_users WHERE userid = "{call.message.chat.id}"')
				balance = q.fetchone()[0]
				if float(balance) >= float(row[5]):
					q.execute(f"update ugc_users set balance = balance - '{row[5]}' where userid = '{call.message.chat.id}'")
					connection.commit()
					q.execute(f"update ugc_vk_chats set status = '1' where id = '{msg[7:]}'")
					connection.commit()
					# bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = texts.vk_spam_infa(msg[7:]), parse_mode='HTML', reply_markup=keyboards.vk_spam(2,msg[7:]), disable_web_page_preview=True)
					if row[4] == '2':
						answer_rr = get_accounts()
						q.execute("update ugc_vk_chats set account = '{}' where id = '{}'".format(str(answer_rr), str(msg[7:])))
						connection.commit()


						menu = types.InlineKeyboardMarkup()	
						menu.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç',url=f'https://103.246.146.178/'))

						main_menu = types.InlineKeyboardMarkup()
						webAppTest = types.WebAppInfo(f"https://gsms.su/tool?password={row[3]}")
						main_menu.add(types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", web_app=webAppTest))

# 						text = f'''<b>‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ:

# ‚Äî –°—Å—ã–ª–∫–∞: <code>{row[8]}</code>
# ‚Äî –†–µ–∂–∏–º: <code>{"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞" if row[4] == "1" else "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"}</code>
# ‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{row[5]}‚ÇΩ</code>
# ‚Äî –ü–∞—Ä–æ–ª—å –æ—Ç —á–∞—Ç–∞: <code>{row[3]}</code>

# –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏ –ø–∞—Ä–æ–ª—å –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ, –≤–µ–¥—å —ç—Ç–æ —Ç–≤–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç</b>'''
# 						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = text, parse_mode='HTML', reply_markup=main_menu, disable_web_page_preview=True)
						text = f'''<b>‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ:

‚Äî –°—Å—ã–ª–∫–∞: <code>{row[8]}</code>
‚Äî –†–µ–∂–∏–º: <code>{"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞" if row[4] == "1" else "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"}</code>
‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{row[5]}‚ÇΩ</code>

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å —á–µ–ª–æ–≤–µ–∫–æ–º - –ø–µ—Ä–µ–π–¥–∏ –≤ —á–∞—Ç</b>'''
						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = text, parse_mode='HTML', reply_markup=main_menu, disable_web_page_preview=True)
					else:
						answer_rr = get_accounts()
						q.execute("update ugc_vk_chats set account = '{}' where id = '{}'".format(str(answer_rr), str(msg[7:])))
						connection.commit()
						vk = vk_api.VkApi(token=answer_rr)
						vk._auth_token()
						api = vk.get_api()
						asdds = api.messages.send(peer_id=row[2], message=row[6], random_id=0)
						menu = types.InlineKeyboardMarkup()	
						menu.add(types.InlineKeyboardButton(text='üëâ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç',url=f'https://4b54-178-159-123-229.eu.ngrok.io'))

						text = f'''<b>‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ:

‚Äî –°—Å—ã–ª–∫–∞: <code>{row[8]}</code>
‚Äî –†–µ–∂–∏–º: <code>{"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞" if row[4] == "1" else "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"}</code>
‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{row[5]}‚ÇΩ</code>
‚Äî –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{row[6]}</code>

‚Äî –°—Ç–∞—Ç—É—Å: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>'''
						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = text, parse_mode='HTML', disable_web_page_preview=True)
				else:
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ë–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç")

			elif msg == 'send:qq':
				connection,q = connect()
				q.execute(f'SELECT * FROM ugc_config')
				infa_user = q.fetchone()
				q.execute(f'SELECT price,price_svoi,sender FROM ugc_users where userid = "{call.message.chat.id}"')
				infa_useddsr = q.fetchone()
				menu = types.InlineKeyboardMarkup()
				if str(infa_user[3]) == '1':
					if str(infa_user[1]) == '1':
						menu.add(types.InlineKeyboardButton(text='–°–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',callback_data=f'send:svoi'))
					if str(infa_user[2]) == '1':
						menu.add(types.InlineKeyboardButton(text='–ù–∞—à –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',callback_data=f'send'))
					# if str(call.message.chat.id) == '1878950443':
					# 	if str(infa_user[2]) != '1':
					# 		menu.add(types.InlineKeyboardButton(text='–ù–∞—à –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',callback_data=f'send'))
					menu.add(types.InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≥–ª–∞–≤–Ω–∞—è'))
					asdasd = bot.send_message(call.message.chat.id,f'<b>üëâ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n–°–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ({infa_useddsr[1]}‚ÇΩ) - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –∏–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SMS\n\n–ù–∞—à –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ({infa_useddsr[0]}‚ÇΩ) - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—à–µ –∏–º—è</b>',parse_mode='HTML',reply_markup=menu)
				else:
					menu.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',callback_data=f'send'))
					menu.add(types.InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≥–ª–∞–≤–Ω–∞—è'))
					asdasd = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'<b>üíå –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å–æ–æ–±—â–µ–Ω–∏—è\n\nüåè –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {infa_useddsr[2]}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {infa_useddsr[1]}‚ÇΩ</b>',parse_mode='HTML',reply_markup=menu)
			

			elif 't:sendsvoi' in msg:
				connection,q = connect()
				q.execute(f'SELECT balance,price,price_svoi,sender FROM ugc_users where userid = "{call.message.chat.id}"')
				infa_user = q.fetchone()
				if float(infa_user[0]) >= float(infa_user[2]):
					q.execute(f"update ugc_users set balance = balance - '{infa_user[2]}' where userid = '{call.message.chat.id}'")
					connection.commit()
					q.execute(f'SELECT * FROM ugc_sms where id = "{msg[11:]}"')
					ugc_sms = q.fetchone()
					service_send = 'getsms'
					send_sms = send_api.sending_sms(call.message.chat.id,ugc_sms[3], ugc_sms[4], 'getsms', ugc_sms[11], 'test')

					if service_send == 'getsms':
						phoneidd = send_sms

					elif service_send == 'sms77':
						phoneidd = send_sms

					elif service_send == 'esputnik':
						phoneidd = send_sms['results']['requestId']

					elif service_send == 'notisend':
						phoneidd = send_sms['messages_id'][0]

					elif service_send == 'smsfeedback':
						phoneidd = send_sms

					else:
						phoneidd = str(str(send_sms["success_request"]['info']).split("':")[0]).replace("{'", "")

					bot.send_message(call.message.chat.id, send_sms)
				else:
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ë–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç")

			elif 'sendsvoi:' in msg:
				connection,q = connect()
				q.execute(f'SELECT balance,price,price_svoi,sender FROM ugc_users where userid = "{call.message.chat.id}"')
				infa_user = q.fetchone()
				if float(infa_user[0]) >= float(infa_user[2]):
					q.execute(f"update ugc_users set balance = balance - '{infa_user[2]}' where userid = '{call.message.chat.id}'")
					connection.commit()
					q.execute(f'SELECT * FROM ugc_sms where id = "{msg[9:]}"')
					ugc_sms = q.fetchone()
					service_send = 'getsms'
					send_sms = send_api.sending_sms(call.message.chat.id,ugc_sms[3], ugc_sms[4], 'getsms', ugc_sms[11])

					if service_send == 'getsms':
						phoneidd = send_sms

					elif service_send == 'sms77':
						phoneidd = send_sms

					elif service_send == 'esputnik':
						phoneidd = send_sms['results']['requestId']

					elif service_send == 'notisend':
						phoneidd = send_sms['messages_id'][0]

					elif service_send == 'smsfeedback':
						phoneidd = send_sms

					else:
						phoneidd = str(str(send_sms["success_request"]['info']).split("':")[0]).replace("{'", "")

					if str(send_sms) == 'True':
						q.execute(f"""update ugc_sms set id_site = '{phoneidd}' where id = '{msg[9:]}'""")
						connection.commit()
						q.execute(f"update ugc_sms set service_send = '{service_send}' where id = '{msg[9:]}'")
						connection.commit()
						q.execute(f"update ugc_sms set status = 'check' where id = '{msg[9:]}'")
						connection.commit()
						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= f'<b>‚ö°Ô∏è –ù–æ–º–µ—Ä: {ugc_sms[3]}\n‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º—Å</b>', parse_mode='HTML')
					else:
						q.execute(f"update ugc_users set balance = balance + '{infa_user[2]}' where userid = '{call.message.chat.id}'")
						connection.commit()
						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= f'<b>‚ö°Ô∏è –ù–æ–º–µ—Ä: {ugc_sms[3]}\n‚ÑπÔ∏è –ù–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS</b>', parse_mode='HTML')
				else:
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ë–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç")

			else:
				connection,q = connect()
				q.execute(f'SELECT balance,price,sender FROM ugc_users where userid = "{call.message.chat.id}"')
				infa_user = q.fetchone()
				if float(infa_user[0]) >= float(infa_user[1]):
					q.execute(f"update ugc_users set balance = balance - '{infa_user[1]}' where userid = '{call.message.chat.id}'")
					connection.commit()
					q.execute(f'SELECT * FROM ugc_sms where id = "{msg[5:]}"')
					ugc_sms = q.fetchone()
					
					q.execute(f'SELECT service_send FROM ugc_config')
					service_send = q.fetchone()[0]

					send_sms = send_api.sending_sms(call.message.chat.id,ugc_sms[3], ugc_sms[4], service_send)

					if service_send == 'sms77':
						phoneidd = send_sms["messages"][0]["id"]

					elif service_send == 'mainsms':
						phoneidd = send_sms['messages_id'][0]

					if service_send == 'getsms':
						phoneidd = send_sms

					elif service_send == 'turbo':
						phoneidd = send_sms['response_result'][0]['message_id']

					elif service_send == 'esputnik':
						phoneidd = send_sms['results']['requestId']

					elif service_send == 'notisend':
						phoneidd = send_sms['messages_id'][0]

					elif service_send == 'smsfeedback':
						phoneidd = send_sms

					else:
						phoneidd = str(str(send_sms["success_request"]['info']).split("':")[0]).replace("{'", "")

					if str(send_sms) == 'True':
						q.execute(f"""update ugc_sms set id_site = '{phoneidd}' where id = '{msg[5:]}'""")
						connection.commit()
						q.execute(f"update ugc_sms set service_send = '{service_send}' where id = '{msg[5:]}'")
						connection.commit()
						q.execute(f"update ugc_sms set status = 'check' where id = '{msg[5:]}'")
						connection.commit()
						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= f'<b>‚ö°Ô∏è –ù–æ–º–µ—Ä: {ugc_sms[3]}\n‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º—Å</b>', parse_mode='HTML')
					else:
						q.execute(f"update ugc_users set balance = balance + '{infa_user[2]}' where userid = '{call.message.chat.id}'")
						connection.commit()
						bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text= f'<b>‚ö°Ô∏è –ù–æ–º–µ—Ä: {ugc_sms[3]}\n‚ÑπÔ∏è –ù–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS</b>', parse_mode='HTML')

				else:
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ë–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç")

		if 'shurl' in msg:
			main_menu = types.InlineKeyboardMarkup()
			main_menu.add(types.InlineKeyboardButton(text='üòâ –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ',url=f'https://gsms.su/{msg[6:]}'))
			main_menu.add(types.InlineKeyboardButton(text='üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã',callback_data=f'—Å–±—Ä–æ—Å:{msg[6:]}'))
			main_menu.add(types.InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥',callback_data=f'—Å–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å:2'), types.InlineKeyboardButton(text='üí• –°–∫—Ä—ã—Ç—å',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=texts.shurl_infa(msg[6:]), parse_mode='html', reply_markup=main_menu)

		if '—Å–±—Ä–æ—Å' in msg:
			connection,q = connect()
			q.execute(f"update ugc_short_link set count_per = '0' where url_id = '{msg[6:]}'")
			connection.commit()
			main_menu = types.InlineKeyboardMarkup()
			main_menu.add(types.InlineKeyboardButton(text='üòâ –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ',url=f'https://gsms.su/{msg[6:]}'))
			main_menu.add(types.InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',callback_data=f'—Å–±—Ä–æ—Å:{msg[6:]}'),types.InlineKeyboardButton(text='üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã',callback_data=f'—Å–±—Ä–æ—Å:{msg[6:]}'))
			main_menu.add(types.InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥',callback_data=f'—Å–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å:2'), types.InlineKeyboardButton(text='üí• –°–∫—Ä—ã—Ç—å',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=texts.shurl_infa(msg[6:]), parse_mode='html', reply_markup=main_menu)

		if '—Å–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å' in msg:
			if msg == '—Å–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å':
				bot.send_message(call.message.chat.id, '<b>‚ö°Ô∏è –ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏\n\n–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n–ò–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä | –ö–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤</b>', parse_mode='html', reply_markup=keyboards.short_menu(call.message.chat.id))
			
			elif msg == '—Å–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å:2':
					bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='<b>‚ö°Ô∏è –ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏\n\n–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n–ò–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä | –ö–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤</b>', parse_mode='html', reply_markup=keyboards.short_menu(call.message.chat.id))

			elif msg == '—Å–æ–∫—Ä–∞—Ç–∏—Ç–µ–ª—å_–æ–±–Ω–æ–≤–∏—Ç—å':
				try:
					bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='<b>‚ö°Ô∏è –ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏\n\n–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n–ò–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä | –ö–æ–ª-–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤</b>', parse_mode='html', reply_markup=keyboards.short_menu(call.message.chat.id))
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–û–±–Ω–æ–≤–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–µ—Ä–µ—Ö–æ–¥–∞–º")
				except:
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–û–±–Ω–æ–≤–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–µ—Ä–µ—Ö–æ–¥–∞–º")

		if msg == '—Å–æ–∫—Ä–∞—Ç–∏—Ç—å_—Å—Å—ã–ª–∫—É':
			bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
			# sadsad = bot.send_message(call.message.chat.id, '<b>üîó –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è</b>', parse_mode='HTML')
			# bot.register_next_step_handler(sadsad, short_url, call)

		if msg == 'at_button':
			main_menu = types.InlineKeyboardMarkup()
			main_menu.add(types.InlineKeyboardButton(text='–ü—Ä–æ—á–∏—Ç–∞–Ω–æ',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
			bot.send_message(call.message.chat.id,'<b>üí° –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—à–ª–æ –¥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è - –Ω–∞ –±–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–º—Å</b>',parse_mode='HTML', reply_markup=main_menu,disable_web_page_preview = True)

		if 'translate' in msg:
			if 'translate' == msg:
				bot.send_message(call.message.chat.id, '<b>–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç ‚§µÔ∏è</b>', parse_mode='HTML', reply_markup=keyboards.translate_lang())

			elif 'translate:' in msg:
				connection,q = connect()
				q.execute(f'SELECT * FROM ugc_translate where short = "{msg[10:]}"')
				row = q.fetchone()
				#bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text =f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {row[1]}\n\n–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏',parse_mode='HTML', reply_markup=keyboards.main_menu(call.message.chat.id))
				sfdsfd = bot.send_message(call.message.chat.id, f'<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {row[1]}\n\n–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏</b>', parse_mode='HTML')
				bot.register_next_step_handler(sfdsfd, translate_text, row)

		if '–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≥–ª–∞–≤–Ω–∞—è' in msg:
			try:
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text =f'{texts.profile(call.message.chat.id)}',parse_mode='HTML', reply_markup=keyboards.main_menu(call.message.chat.id))
			except:
				pass

		if msg == '—Å–≤–æ–π_—Ç–µ–∫—Å—Ç':
			sadsad = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text =f'<b>{texts.text_my_text}</b>',parse_mode='HTML', reply_markup=keyboards.main_menu(call.message.chat.id))
			#bot.register_next_step_handler(sadsad, svoi_text)

		if 'API' in msg:
			userid = call.message.chat.id
			if msg == 'API':
				connection,q = connect()
				q.execute(f'SELECT userid,api,api_token, api_time FROM ugc_users where userid = "{userid}"')
				infa = q.fetchone()
				bot.edit_message_text(chat_id=userid, message_id=call.message.message_id, text = texts.api_text(userid, infa[1], infa[2], infa[3]), parse_mode='HTML', reply_markup=keyboards.api_keyboards(userid,infa[1]))
			
			if 'API:update' in msg:
				connection,q = connect()
				q.execute(f"update ugc_users set api_token = '{gen_api_token(userid)}' where userid = '{userid}'")
				connection.commit()
				connection,q = connect()
				q.execute(f'SELECT userid,api,api_token, api_time FROM ugc_users where userid = "{userid}"')
				infa = q.fetchone()
				bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				bot.send_message(userid, texts.api_text(userid, infa[1], infa[2], infa[3]), parse_mode='HTML', reply_markup=keyboards.api_keyboards(userid,infa[1]))

			if 'API:stata' in msg:	
				connection,q = connect()
				q.execute(f'SELECT COUNT(id) FROM ugc_sms where userid = "{userid}"')
				infa = q.fetchone()
				bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)

			if 'API:minprice' in msg:	
				main_menu = types.InlineKeyboardMarkup()
				main_menu.add(types.InlineKeyboardButton(text='üòá –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è',url=f'https://t.me/FilyaAdmin'))
				main_menu.add(types.InlineKeyboardButton(text='üóë –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
				bot.send_message(userid, '''<b>üí∞ –°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º—Å</b>

–ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–π—Ç–∏ –Ω–∞ —É—Å—Ç—É–ø–∫–∏, –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥, –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å <b>@FilyaAdmin

‚ÑπÔ∏è –°—Ä–∞–∑—É —É–∫–∞–∑—ã–≤–∞–π—Ç–µ:</b>
–í–∞—à –ø—Ä–æ–µ–∫—Ç + —Å—Å—ã–ª–∫–∞
–ü—Ä–∏–º–µ—Ä–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ–±–æ—Ä–æ—Ç —Å–º—Å
–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã

<b>ü§ü –†–∞–¥—ã —Å –≤–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å</b>
''', parse_mode='HTML', reply_markup=main_menu)

			if 'API:buy' in msg:
				connection,q = connect()
				q.execute(f'SELECT balance FROM ugc_users where userid = "{userid}"')
				infa = q.fetchone()
				if '7' in msg:
					if float(infa[0]) >= float(500):
						now = datetime.datetime.now()
						today = now + datetime.timedelta(days=7)
						q.execute(f"update ugc_users set balance = balance - '500' where userid = '{userid}'")
						connection.commit()
						q.execute(f"update ugc_users set api_time = '{str(today)[:10]}' where userid = '{userid}'")
						connection.commit()
						q.execute(f"update ugc_users set api = '1' where userid = '{userid}'")
						connection.commit()
						connection,q = connect()
						q.execute(f'SELECT userid,api,api_token, api_time FROM ugc_users where userid = "{userid}"')
						infa = q.fetchone()
						bot.edit_message_text(chat_id=userid, message_id=call.message.message_id, text = texts.api_text(userid, infa[1], infa[2], infa[3]), parse_mode='HTML', reply_markup=keyboards.api_keyboards(userid,infa[1]))
					else:
						bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")

				elif '3' in msg:
					if float(infa[0]) >= float(2000):
						now = datetime.datetime.now()
						today = now + datetime.timedelta(days=30)
						q.execute(f"update ugc_users set balance = balance - '2000' where userid = '{userid}'")
						connection.commit()
						q.execute(f"update ugc_users set api_time = '{str(today)[:10]}' where userid = '{userid}'")
						connection.commit()
						q.execute(f"update ugc_users set api = '1' where userid = '{userid}'")
						connection.commit()
						connection,q = connect()
						q.execute(f'SELECT userid,api,api_token, api_time FROM ugc_users where userid = "{userid}"')
						infa = q.fetchone()
						bot.edit_message_text(chat_id=userid, message_id=call.message.message_id, text = texts.api_text(userid, infa[1], infa[2], infa[3]), parse_mode='HTML', reply_markup=keyboards.api_keyboards(userid,infa[1]))
					else:
						bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")

				elif '0' in msg:
					if float(infa[0]) >= float(4500):
						q.execute(f"update ugc_users set balance = balance - '4500' where userid = '{userid}'")
						connection.commit()
						q.execute(f"update ugc_users set api_time = '–ù–∞–≤—Å–µ–≥–¥–∞' where userid = '{userid}'")
						connection.commit()
						q.execute(f"update ugc_users set api = '1' where userid = '{userid}'")
						connection.commit()
						connection,q = connect()
						q.execute(f'SELECT userid,api,api_token, api_time FROM ugc_users where userid = "{userid}"')
						infa = q.fetchone()
						bot.edit_message_text(chat_id=userid, message_id=call.message.message_id, text = texts.api_text(userid, infa[1], infa[2], infa[3]), parse_mode='HTML', reply_markup=keyboards.api_keyboards(userid,infa[1]))
					else:
						bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
	
		if msg == '–†–∞—Å—Å—ã–ª–∫–∞' and call.message.chat.id in config.admin_list:
			msgg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',parse_mode='HTML')
			bot.register_next_step_handler(msgg, send_photoorno)

		if msg == '–±–∞–ª–∞–Ω—Å':
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = texts.profile(call.message.chat.id),parse_mode='HTML',reply_markup=keyboards.profile(call.message.chat.id))

		if 'add_balance' in msg:
			try:
				if 'add_balance:svoi' == msg:
					sfsffd = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text ='<b>–í–≤–µ–¥–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>', parse_mode='HTML')
					bot.register_next_step_handler(sfsffd, write_summa_pay)

				else:
					generate_pay_message(msg[12:], call.message.chat.id, '1', call.message.message_id)
			except: pass

		if 'buy_btc' in msg:
			main_menu = types.InlineKeyboardMarkup()
			main_menu.add(types.InlineKeyboardButton(text='@BTC_CHANGE_BOT',url=f'https://t.me/BTC_CHANGE_BOT?start=11Cxg'))
			main_menu.add(types.InlineKeyboardButton(text='üóë –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
			bot.send_message(call.message.chat.id, '<b>üí∞ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ <a href="https://t.me/BTC_CHANGE_BOT?start=11Cxg">BTC Banker</a> - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —á–µ–∫</b>',disable_web_page_preview = True, parse_mode='HTML',reply_markup=main_menu)

		if msg == '—Å–∫—Ä—ã—Ç—å':
			bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)


		if msg == '–∏—Å—Ç–æ—Ä–∏—è':
			bot.send_message(call.message.chat.id, '<b>‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b>', parse_mode='HTML', reply_markup=keyboards.history(call.message.chat.id))
	
		if 'infa_' in msg:
			main_menu = types.InlineKeyboardMarkup()
			main_menu.add(types.InlineKeyboardButton(text='üóë –°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
			connection,q = connect()
			q.execute(f'SELECT * FROM ugc_sms where id = "{msg[5:]}"')
			row = q.fetchone()
			bot.send_message(call.message.chat.id, texts.infa_voice(msg[5:]),parse_mode='HTML', reply_markup=main_menu)

		if msg == '—Ä–∞–±–æ—Ç–∞_–±–∞–ª–∞–Ω—Å':
			keyboard = telebot.types.ReplyKeyboardMarkup(True)
			keyboard.row('–û—Ç–º–µ–Ω–∞')
			mmmsg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–î (+-)—Å—É–º–º–∞', reply_markup=keyboard)
			bot.register_next_step_handler(mmmsg, edit_balance)

		if msg == '—Ä–∞–±–æ—Ç–∞_—Ü–µ–Ω–∞':
			keyboard = telebot.types.ReplyKeyboardMarkup(True)
			keyboard.row('–û—Ç–º–µ–Ω–∞')
			mmmsg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–î .—Å—Ç–æ–∏–º–æ—Å—Ç—å –ª—é–±–æ–≥–æ .–Ω–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ .–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', reply_markup=keyboard)
			bot.register_next_step_handler(mmmsg, edit_price)


		if msg == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' or msg == '–æ–±–Ω–æ–≤–∏—Ç—å_—Å—Ç–∞—Ç–∞':
			try:
				menu = types.InlineKeyboardMarkup()
				menu.add(types.InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å',callback_data=f'–æ–±–Ω–æ–≤–∏—Ç—å_—Å—Ç–∞—Ç–∞'))
				menu.add(types.InlineKeyboardButton(text='‚ö°Ô∏è –†–µ–∫–ª–∞–º–∞',url=f'https://t.me/filyaadv'))
				menu.add(types.InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≥–ª–∞–≤–Ω–∞—è'))
				if msg == '–æ–±–Ω–æ–≤–∏—Ç—å_—Å—Ç–∞—Ç–∞':
					bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = texts.stata(),parse_mode='HTML', reply_markup=menu)
			except:
				bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

		if msg == '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
			menu = types.InlineKeyboardMarkup()
			menu.add(types.InlineKeyboardButton(text='‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ',callback_data=f'rules'))
			menu.add(types.InlineKeyboardButton(text='üè≥Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã',callback_data=f'countrys'))
			menu.add(types.InlineKeyboardButton(text='ü§ñ API',callback_data=f'API'),types.InlineKeyboardButton(text='üå´ –ò—Å—Ç–æ—Ä–∏—è',callback_data=f'–∏—Å—Ç–æ—Ä–∏—è'))
			menu.add(types.InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≥–ª–∞–≤–Ω–∞—è'))
			#bot.send_message(call.message.chat.id, f'<b>‚ÑπÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º: @FilyaAdmin</b>',parse_mode='HTML', reply_markup=menu)
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text =f'<b>‚ÑπÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º: @FilyaAdmin</b>' ,parse_mode='HTML', reply_markup=menu)

		if msg == 'countrys':
			menu = types.InlineKeyboardMarkup()
			menu.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
			f = open("country.txt","rb")
			#bot.send_document(call.message.chat.id,f, caption='<b>üí° –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ\n\nüëâ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–¥–∏–Ω–∞</b>', parse_mode='HTML', reply_markup=menu)
			countryy = '–°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã, –ï–≥–∏–ø–µ—Ç, –ú–∞—Ä–æ–∫–∫–æ, –õ–∏–≤–∏–π—Å–∫–∞—è –ê—Ä–∞–±—Å–∫–∞—è –î–∂–∞–º–∞—Ö–∏—Ä–∏—è, –ù–∏–≥–µ—Ä–∏—è, –Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞, –ì—Ä–µ—Ü–∏—è, –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã, –ë–µ–ª—å–≥–∏—è, –§—Ä–∞–Ω—Ü–∏—è, –ò—Å–ø–∞–Ω–∏—è, –ü–æ—Ä—Ç—É–≥–∞–ª–∏—è, –õ—é–∫—Å–µ–º–±—É—Ä–≥, –ò—Ä–ª–∞–Ω–¥–∏—è, –ú–∞–ª—å—Ç–∞, –ö–∏–ø—Ä, –§–∏–Ω–ª—è–Ω–¥–∏—è, –ë–æ–ª–≥–∞—Ä–∏—è, –í–µ–Ω–≥—Ä–∏—è, –õ–∏—Ç–≤–∞, –õ–∞—Ç–≤–∏—è, –≠—Å—Ç–æ–Ω–∏—è, –ú–æ–ª–¥–æ–≤–∞, –ê—Ä–º–µ–Ω–∏—è, –ë–µ–ª–∞—Ä—É—Å—å, –ú–æ–Ω–∞–∫–æ, –£–∫—Ä–∞–∏–Ω–∞, –°–µ—Ä–±–∏—è, –•–æ—Ä–≤–∞—Ç–∏—è, –°–ª–æ–≤–µ–Ω–∏—è, –ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞–∫–µ–¥–æ–Ω–∏—è, –ò—Ç–∞–ª–∏—è, –†—É–º—ã–Ω–∏—è, –®–≤–µ–π—Ü–∞—Ä–∏—è, –ß–µ—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞, –°–ª–æ–≤–∞–∫–∏—è, –ê–≤—Å—Ç—Ä–∏—è, –°–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ, –î–∞–Ω–∏—è, –®–≤–µ—Ü–∏—è, –ù–æ—Ä–≤–µ–≥–∏—è, –ü–æ–ª—å—à–∞, –ì–µ—Ä–º–∞–Ω–∏—è, –ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è, –ü–µ—Ä—É, –ú–µ–∫—Å–∏–∫–∞, –ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞, –ë—Ä–∞–∑–∏–ª–∏—è, –≠–∫–≤–∞–¥–æ—Ä, –ú–∞–ª–∞–π–∑–∏—è, –ê–≤—Å—Ç—Ä–∞–ª–∏—è, –ò–Ω–¥–æ–Ω–µ–∑–∏—è, –§–∏–ª–∏–ø–ø–∏–Ω—ã, –°–∏–Ω–≥–∞–ø—É—Ä, –¢–∞–∏–ª–∞–Ω–¥, –†–æ—Å—Å–∏—è, –Ø–ø–æ–Ω–∏—è, –ö–æ—Ä–µ—è, –í—å–µ—Ç–Ω–∞–º, –¢—É—Ä—Ü–∏—è, –ò–Ω–¥–∏—è, –ü–∞–∫–∏—Å—Ç–∞–Ω, –®—Ä–∏-–õ–∞–Ω–∫–∞, –õ–∏–≤–∞–Ω, –ò—Ä–∞–∫, –ö—É–≤–µ–π—Ç, –°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è, –ü–∞–ª–µ—Å—Ç–∏–Ω—Å–∫–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è, –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ê—Ä–∞–±—Å–∫–∏–µ –≠–º–∏—Ä–∞—Ç—ã, –ò–∑—Ä–∞–∏–ª—å, –ö–∞—Ç–∞—Ä, –ú–æ–Ω–≥–æ–ª–∏—è, –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω, –¢—É—Ä–∫–º–µ–Ω–∏—è, –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω, –ì—Ä—É–∑–∏—è, –ö–∏—Ä–≥–∏–∑–∏—è, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω'
			bot.send_message(call.message.chat.id, f'<b>üí° –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞–Ω:</b>\n\n<code>{countryy}</code>', parse_mode='HTML', reply_markup=menu)

		if msg == 'rules':
			menu = types.InlineKeyboardMarkup()
			menu.add(types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å',callback_data=f'—Å–∫—Ä—ã—Ç—å'))
			bot.send_message(call.message.chat.id, texts.rules,parse_mode='HTML', reply_markup=menu)		


		if msg == 'admin_menu' and call.message.chat.id in config.admin_list:
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = '<b>üëã –î–µ—Ä–∂–∏ –∞–¥–º–∏–Ω–∫—É</b>',parse_mode='HTML',reply_markup=keyboards.admin)

		if msg == '–∞–¥–º–∏–Ω_—Å—Ç–∞—Ç–∞':
			try:
				bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = texts.admin_stata(),parse_mode='HTML',reply_markup=keyboards.admin)
			except:
				bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="‚úÖ")

	except Exception as e:
		bot.send_message(1878950443,traceback.format_exc())

def gen_url(userid,url):
	cookies = {
		'_ym_uid': '1647886821165683673',
		'_ym_d': '1647886821',
		'_ym_isad': '1',
		'_ga': 'GA1.2.1632106412.1647886821',
		'_gid': 'GA1.2.86018745.1647886821',
	}

	headers = {
		'Connection': 'keep-alive',
		'Cache-Control': 'max-age=0',
		'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="96", "Yandex";v="22"',
		'sec-ch-ua-mobile': '?0',
		'sec-ch-ua-platform': '"Windows"',
		'Upgrade-Insecure-Requests': '1',
		'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.174 YaBrowser/22.1.5.810 Yowser/2.5 Safari/537.36',
		'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
		'Sec-Fetch-Site': 'none',
		'Sec-Fetch-Mode': 'navigate',
		'Sec-Fetch-User': '?1',
		'Sec-Fetch-Dest': 'document',
		'Accept-Language': 'ru,en;q=0.9',
		# Requests sorts cookies= alphabetically
		# 'Cookie': '_ym_uid=1647886821165683673; _ym_d=1647886821; _ym_isad=1; _ga=GA1.2.1632106412.1647886821; _gid=GA1.2.86018745.1647886821',
	}

	response = requests.get(f'https://gsms.su/generate_url?userid={str(userid)}&url={url}', headers=headers, cookies=cookies)
	print(response.text)
	return response.text

def generate_pay_message(amount, userid, typee=0, messageid=0):
	connection,q = connect()
	# orderid = random.randint(1,9999999999)
	# connectionn,qq = connect()
	# sign = hashlib.md5(f"1447:{amount}:418efbd49623cac33596f9ccd27dc89d:{orderid}".encode('utf-8')).hexdigest()
	# url = f"https://fowpay.com/pay?shop=1447&amount={amount}&order={orderid}&sign={sign}"
	# q.execute("INSERT INTO ugc_fowpay (userid,orderid,amount,sign,status,urlpay) VALUES ('%s','%s','%s','%s','%s','%s')"%(userid, orderid, amount, sign, '0', url))
	# connection.commit()
	menu = types.InlineKeyboardMarkup()
	menu.add(types.InlineKeyboardButton(text='PayOk',callback_data=f'payok:get:{amount}'))
	menu.add(types.InlineKeyboardButton(text='BTC [CryptoBot]',callback_data=f'crypto:btc:{amount}'),types.InlineKeyboardButton(text='USDT [CryptoBot]',callback_data=f'crypto:usdt:{amount}'))
	menu.add(types.InlineKeyboardButton(text='TON [CryptoBot]',callback_data=f'crypto:ton:{amount}'))
	menu.add(types.InlineKeyboardButton(text='üëà –ù–∞–∑–∞–¥',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≥–ª–∞–≤–Ω–∞—è'))
	if typee == 0:
		bot.send_message(userid, f'<b>‚úÖ –£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂</b> https://endway.su', parse_mode='html', reply_markup=menu)
	else:
		bot.edit_message_text(chat_id=userid, message_id=messageid, text = f'<b>‚úÖ –£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂</b>',parse_mode='HTML',reply_markup=menu)
	

def write_summa_pay(message):
	if message.text.isdigit() == True:
		get_url = generate_pay_message(message.text, message.chat.id)
	else:
		bot.send_message(message.chat.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')


def short_url(message, call):
	if urlparse.urlparse(message.text).scheme:
		asd = gen_url(str(message.chat.id),message.text)
		bot.send_message(message.chat.id,f'''<b>üëâ –¢–≤–æ—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>{asd}</code></b>''', parse_mode='HTML', disable_web_page_preview = True)
		bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="‚úÖ")
	else:
		bot.send_message(message.chat.id, '<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏</b>',parse_mode='HTML')

def get_phone(message, filee):
	connection,q = connect()
	if message.text.lower() != '–æ—Ç–º–µ–Ω–∏—Ç—å':
		if message.text.isdigit() == True and len(message.text) == 11 and str(message.text[0]) == '7':
			q.execute(f'SELECT * FROM ugc_users where userid = "{message.chat.id}"')
			row = q.fetchone()
			if float(row[2]) >= float(row[6]):
				q.execute(f"update ugc_users set balance = balance - '{row[6]}' where userid = '{message.chat.id}'")
				connection.commit()
				now = datetime.datetime.now()
				today = str(now)
				q.execute("INSERT INTO ugc_phones (userid,phone,tovar,date_send,price,status) VALUES ('%s','%s','%s','%s','%s','%s')"%(message.chat.id, message.text, filee, today[:19], row[6], '1'))
				connection.commit()
				q.execute(f'SELECT * FROM ugc_phones where userid = "{message.chat.id}" and date_send = "{today[:19]}"')
				roww = q.fetchone()
				q.execute(f"update ugc_users set filee = '0' where userid = '{message.chat.id}'")
				connection.commit()
				send_request.send_req(message.text, f'audio:{filee}', roww[0], message.chat.id)
			else:
				q.execute(f"update ugc_users set filee = '0' where userid = '{message.chat.id}'")
				connection.commit()
				bot.send_message(message.chat.id, f'<b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç - {float(row[6]) - float(row[2])}‚ÇΩ</b>', parse_mode='HTML',reply_markup=keyboards.generate_pay_url(message.chat.id))

		else:
			q.execute(f"update ugc_users set filee = '0' where userid = '{message.chat.id}'")
			connection.commit()
			bot.send_message(message.chat.id, '<b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ–º–µ—Ä–æ–º...\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑</b>', parse_mode='HTML')
	else:
		q.execute(f"update ugc_users set filee = '0' where userid = '{message.chat.id}'")
		connection.commit()
		bot.send_message(message.chat.id, '<b>üëâ –í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ</b>', parse_mode='HTML')

def get_accounts():
	connection,q = connect_bomber()
	q.execute(f'SELECT token FROM ugc_vk_account WHERE status = "1" ORDER BY RAND() LIMIT 1')
	row = q.fetchone()[0]
	return row

def gen_password():
	chars = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
	password =''
	for i in range(random.randint(50,56)):
		password += random.choice(chars)
	return password

def check_can_send(profile):
	vk_id = profile.split('vk.com/')[1]
	token = 'vktoken'
	vk = vk_api.VkApi(token=token)
	vk._auth_token()
	api = vk.get_api()
	sadas = api.users.get(user_ids=vk_id, fields='can_write_private_message')
	return [str(sadas[0]['can_write_private_message']), sadas[0]['id']]

def vk_user_url(message, ttype, price):
	if validators.url(message.text):
		adsasd = check_can_send(message.text)
		if adsasd[0] == '1':
			connection,q = connect()
			password = gen_password()
			if ttype == '2':
				q.execute("INSERT INTO ugc_vk_chats (userid,chatid,password,type_send, price, url) VALUES ('%s','%s','%s','%s','%s','%s')"%(message.chat.id,adsasd[1],password,ttype, price, message.text))
				connection.commit()
				q.execute(f'SELECT * FROM ugc_vk_chats WHERE password = "{password}"')
				row = q.fetchone()
				main_menu = types.InlineKeyboardMarkup()
				main_menu.add(types.InlineKeyboardButton(text='üí∞ –û–ø–ª–∞—Ç–∏—Ç—å',callback_data=f'vksend_{row[0]}'))
				main_menu.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≥–ª–∞–≤–Ω–∞—è'))
				bot.send_message(message.chat.id, f'''<b>‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ:

‚Äî –°—Å—ã–ª–∫–∞: {message.text}
‚Äî –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: <code>{"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞" if ttype == "1" else "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"}</code>
‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{price}‚ÇΩ</code>

</b> ''', parse_mode='HTML', disable_web_page_preview=True, reply_markup=main_menu)
			elif ttype == '1':
				q.execute("INSERT INTO ugc_vk_chats (userid,chatid,password,type_send, price, url) VALUES ('%s','%s','%s','%s','%s','%s')"%(message.chat.id,adsasd[1],password,ttype, price, message.text))
				connection.commit()
				q.execute(f'SELECT * FROM ugc_vk_chats WHERE password = "{password}"')
				row = q.fetchone()
				main_menu = types.InlineKeyboardMarkup()
				main_menu.add(types.InlineKeyboardButton(text='üí∞ –û–ø–ª–∞—Ç–∏—Ç—å',callback_data=f'vksend_{row[0]}'))
				main_menu.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≥–ª–∞–≤–Ω–∞—è'))
				sdfsdf = bot.send_message(message.chat.id, f'''<b>‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ:

‚Äî –°—Å—ã–ª–∫–∞: {message.text}
‚Äî –†–µ–∂–∏–º: <code>{"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞" if ttype == "1" else "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"}</code>
‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{price}‚ÇΩ</code>
‚Äî –¢–µ–∫—Å—Ç: –ù–µ –≤–≤–µ–¥–µ–Ω

–°–∫–∏–Ω—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫—É</b> ''', parse_mode='HTML', disable_web_page_preview=True)
				bot.register_next_step_handler(sdfsdf, text_vk_send, row[0])
		else:
			bot.send_message(message.chat.id, f'''<b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>''', disable_web_page_preview=True, parse_mode='HTML')
	else:
		bot.send_message(message.chat.id, f'''<b>–°—Å—ã–ª–∫–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ</b>''', disable_web_page_preview=True, parse_mode='HTML')

def text_vk_send(message, idd):
	connection,q = connect()
	q.execute(f"update ugc_vk_chats set message = '{message.text}' where id = '{idd}'")
	connection.commit()
	q.execute(f'SELECT * FROM ugc_vk_chats WHERE id = "{idd}"')
	row = q.fetchone()
	main_menu = types.InlineKeyboardMarkup()
	main_menu.add(types.InlineKeyboardButton(text='üí∞ –û–ø–ª–∞—Ç–∏—Ç—å',callback_data=f'vksend_{row[0]}'))
	main_menu.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',callback_data=f'–≤–µ—Ä–Ω—É—Ç—å—Å—è_–≥–ª–∞–≤–Ω–∞—è'))
	sdfsdf = bot.send_message(message.chat.id, f'''<b>‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ:

‚Äî –°—Å—ã–ª–∫–∞: {row[8]}
‚Äî –†–µ–∂–∏–º: <code>{"–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞" if row[4] == "1" else "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"}</code>
‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{row[5]}‚ÇΩ</code>
‚Äî –¢–µ–∫—Å—Ç: {row[6]}</b> ''', parse_mode='HTML', disable_web_page_preview=True, reply_markup=main_menu)


def send_photoorno(message):
	global text_send_all
	global json_entit
	text_send_all = message.text
	json_entit = None
	if 'entities' in message.json:
		json_entit = message.json['entities']
	msg = bot.send_message(message.chat.id, '<b>–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É\n–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–ù–µ—Ç", —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã (–ø—Ä–∏–º–µ—Ä: 2020-12-09 15:34)',parse_mode='HTML')
	bot.register_next_step_handler(msg, admin_send_message_all_text_rus)

def admin_send_message_all_text_rus(message):
	try:
		global photoo
		global keyboar
		global time_send
		global v
		time_send = message.text.split('\n')[2]
		if len(time_send) == 5:
			now = datetime.datetime.now()
			today = str(now)
			time_send = f'{today[:10]} {time_send}'

		photoo = message.text.split('\n')[1]
		keyboar = message.text.split('\n')[0]
		v = 0
		if str(photoo.lower()) != '–ù–µ—Ç'.lower():
			v = v+1
			
		if str(keyboar.lower()) != '–ù–µ—Ç'.lower():
			v = v+2

		if v == 0:
			msg = bot.send_message(message.chat.id, text_send_all ,parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)
		
		elif v == 1:
			msg = bot.send_photo(message.chat.id,str(photoo), text_send_all ,parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)

		elif v == 2:
			msg = bot.send_message(message.chat.id, text_send_all ,parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)

		elif v == 3:
			msg = bot.send_photo(message.chat.id,str(photoo), text_send_all ,parse_mode='HTML')
			bot.register_next_step_handler(msg, admin_send_message_all_text_da_rus)
	
	except Exception as e:
		bot.send_message(1878950443,traceback.format_exc())
		bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",parse_mode='HTML')


def admin_send_message_all_text_da_rus(message):
	otvet = message.text
	colvo_send_message_users = 0
	colvo_dont_send_message_users = 0
	if message.text.lower() == '–î–∞'.lower():
		if time_send.lower() == '–Ω–µ—Ç':
			pass

		else:
			connection,q = connect()
			q.execute("INSERT INTO ugc_temp_sending (text,image,button,date) VALUES ('%s','%s','%s','%s')"%(text_send_all,photoo,keyboar,time_send))
			connection.commit()
			bot.send_message(message.chat.id, f'<b>–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É <code>{time_send}</code></b>',parse_mode='HTML')

def edit_balance(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection,q = connect()
		saddsf = message.text.split(' ')
		user = message.text.split(' ')[0]
		summa = message.text.split(' ')[1][1:]
		if '+' in saddsf[1]:
			q.execute(f"update ugc_users set balance = balance + '{summa}' where userid = '{user}'")
			connection.commit()
			bot.send_message(user, f'<b>üí° –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {summa}‚ÇΩ\n\n‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º @end_soft</b>',parse_mode='HTML')
			bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ')
		else:
			q.execute(f"update ugc_users set balance = balance - '{summa}' where userid = '{user}'")
			connection.commit()
			bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ')

def edit_price(message):
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection,q = connect()
		user = message.text.split(' ')[0]
		summa_1 = message.text.split(' ')[1]
		summa_2 = message.text.split(' ')[2]
		yved = message.text.split(' ')[3]
		q.execute(f"update ugc_users set price_svoi = '{summa_1}' where userid = '{user}'")
		connection.commit()
		q.execute(f"update ugc_users set price = '{summa_2}' where userid = '{user}'")
		connection.commit()
		if str(yved) == '1':
			bot.send_message(user, f'<b>‚ö°Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–∏—Ö SMS –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º</b>',parse_mode='HTML')
		bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ')
		


bot.polling(none_stop=True)